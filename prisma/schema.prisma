generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/generated/zod"
  useMultipleFiles                 = false
  writeBarrelFiles                 = false
  createInputTypes                 = false
  createModelTypes                 = true
  addInputTypeValidation           = false
  addIncludeType                   = false
  addSelectType                    = false
  validateWhereUniqueInput         = false
  createOptionalDefaultValuesTypes = false
  createRelationValuesTypes        = false
  createPartialTypes               = false
  useDefaultValidators             = false
  coerceDate                       = false
  writeNullishInModelTypes         = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URI")
}

model Users {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String
  role        Roles     @relation(fields: [roleId], references: [id])
  roleId      String    @db.ObjectId
  tenant      Tenants   @relation(fields: [tenantId], references: [id])
  tenantId    String    @db.ObjectId
  name        String?
  phoneNumber String?
  bio         String?
  resetToken  String?
  deletedAt   DateTime?
  files       Files[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("users")
}

model Tenants {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  users     Users[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenants")
}

model Roles {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  users     Users[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Files {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users   @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  name      String?
  path      String?
  text      String?
  tags      String?
  views     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

model ErrorLogs {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  status     String?
  message    String?
  method     String?
  url        String?
  loggedUser String?
  name       String?
  stack      String?
  details    Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("error_logs")
}
